<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Home</title>
    <link>https://kowalcj0.github.io/tags/python/</link>
    <description>Recent content in python on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 15 Sep 2021 17:50:36 +0100</lastBuildDate><atom:link href="https://kowalcj0.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use default factory to initialize nested dataclass fields</title>
      <link>https://kowalcj0.github.io/2021/09/15/initialize_nested_dataclasses_with_default_factory/</link>
      <pubDate>Wed, 15 Sep 2021 17:50:36 +0100</pubDate>
      
      <guid>https://kowalcj0.github.io/2021/09/15/initialize_nested_dataclasses_with_default_factory/</guid>
      <description>I you happen to work with nested Python dataclasses  , then maybe you&amp;rsquo;ve noticed an issues with defining field values by creating an instance of some object.
In the example below, all instances of class Main will point to the same instance of class Sub:
from dataclasses import dataclass, field @dataclass class Sub: prop: str = field(default=&amp;#34;some value&amp;#34;) @dataclass class Main: sub: Sub = Sub() m1 = Main() m2 = Main() id(m1) Out[1]: 140304747921264 id(m2) Out[2]: 140304748528400 assert id(m1.</description>
    </item>
    
    <item>
      <title>UrlString</title>
      <link>https://kowalcj0.github.io/2020/05/14/python-url-strings/</link>
      <pubDate>Thu, 14 May 2020 14:10:00 +0100</pubDate>
      
      <guid>https://kowalcj0.github.io/2020/05/14/python-url-strings/</guid>
      <description>UrlString  is a convenience wrapper around a string object for making it easy to build URL strings. It borrows the / syntax from pathlib  to allow for the building of natural looking URLs.
An example implementation by UK Trade team:
class UrlString(str): def __truediv__(self, other): base = self.strip(&amp;#39;/&amp;#39;) path = other.strip(&amp;#39;/&amp;#39;) return UrlString(f&amp;#39;{base}/{path}/&amp;#39;) Usage:
home = UrlString(&amp;#39;https://example.com&amp;#39;) new_url = home / &amp;#39;foo&amp;#39; / &amp;#39;bar&amp;#39; print(new_url) https://example.com/foo/bar/ </description>
    </item>
    
    <item>
      <title>import zipfile</title>
      <link>https://kowalcj0.github.io/2020/04/30/import-zipfile/</link>
      <pubDate>Thu, 30 Apr 2020 20:05:24 +0100</pubDate>
      
      <guid>https://kowalcj0.github.io/2020/04/30/import-zipfile/</guid>
      <description>Recently, I had a look at zipfile  module.
It&amp;rsquo;s surprisingly easy to work with.
Snippets below should give you a rough idea how to use it.
Create a zip file import zipfile file_to_compress = &amp;#34;server.log&amp;#34; zip_file_name = &amp;#34;server.log.zip&amp;#34; with zipfile.ZipFile(zip_file_name, &amp;#34;w&amp;#34;, zipfile.ZIP_DEFLATED) as myzip: myzip.write(file_to_compress) NOTE: 3rd argument defines the compression type.
Choose from:
 ZIP_STORED (no compression) ZIP_DEFLATED (requires zlib) ZIP_BZIP2 (requires bz2) ZIP_LZMA (requires lzma)  Unpack a zip archive with zipfile.</description>
    </item>
    
    <item>
      <title>Play videoclip for currently playing song in mpv</title>
      <link>https://kowalcj0.github.io/2018/03/29/get-song-title-from-dbus-via-mpris2-find-videoclip-with-ddgr-on-youtube-and-play-it-with-mpv/</link>
      <pubDate>Thu, 29 Mar 2018 15:15:14 +0100</pubDate>
      
      <guid>https://kowalcj0.github.io/2018/03/29/get-song-title-from-dbus-via-mpris2-find-videoclip-with-ddgr-on-youtube-and-play-it-with-mpv/</guid>
      <description>Short demo: Your browser does not support the video tag.  Requirements You&amp;rsquo;ll need:
 python 3.x mpv  video player music player that supports MPRIS2 D-Bus interface   mpd  + mpDris2   deadbeef  + mpris2-plugin     some D-Bus packages -&amp;gt; dbus-devel dbus-python-devel dbus-glib-devel ddgr https://github.com/jarun/ddgr  - a CLI client for DuckDuckGo  System packages Once you have your player &amp;amp; MPRIS2 installed &amp;amp; configured, install:</description>
    </item>
    
    <item>
      <title>How to unit test Django&#39;s Function Based Views</title>
      <link>https://kowalcj0.github.io/2014/07/31/how-to-unit-test-djangos-function-based-views/</link>
      <pubDate>Thu, 31 Jul 2014 13:27:58 +0000</pubDate>
      
      <guid>https://kowalcj0.github.io/2014/07/31/how-to-unit-test-djangos-function-based-views/</guid>
      <description>Let&amp;rsquo;s assume than the URL pattern to your Function Based View is defined like that:
_urls.py_
urlpatterns = patterns( ..., url(r&amp;#39;^$&amp;#39;, views.index, name=&amp;#39;index&amp;#39;), ... ) and your function based view looks like this: _views.py_
@api_view([&amp;#39;GET&amp;#39;]) @permission_classes((AllowAny,)) def index(request): data = { &amp;#39;field&amp;#39;: &amp;#39;value&amp;#39; } return Response(data) Then you can unit test such view by creating a minimal instance of the HttpRequest and pass it to that view. I tried to mock to test such view with the Mock  library, by with no luck!</description>
    </item>
    
  </channel>
</rss>
