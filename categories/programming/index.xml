<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Home</title>
    <link>https://kowalcj0.github.io/categories/programming/</link>
    <description>Recent content in programming on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 30 Apr 2020 20:05:24 +0100</lastBuildDate>
    
	<atom:link href="https://kowalcj0.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>import zipfile</title>
      <link>https://kowalcj0.github.io/2020/04/30/import-zipfile/</link>
      <pubDate>Thu, 30 Apr 2020 20:05:24 +0100</pubDate>
      
      <guid>https://kowalcj0.github.io/2020/04/30/import-zipfile/</guid>
      <description>Recently, I had a look at zipfile module.
It&amp;rsquo;s surprisingly easy to work with.
Snippets below should give you a rough idea how to use it.
Create a zip file import zipfile file_to_compress = &amp;#34;server.log&amp;#34; zip_file_name = &amp;#34;server.log.zip&amp;#34; with zipfile.ZipFile(zip_file_name, &amp;#34;w&amp;#34;, zipfile.ZIP_DEFLATED) as myzip: myzip.write(file_to_compress) NOTE: 3rd argument defines the compression type.
Choose from:
 ZIP_STORED (no compression) ZIP_DEFLATED (requires zlib) ZIP_BZIP2 (requires bz2) ZIP_LZMA (requires lzma)  Unpack a zip archive with zipfile.</description>
    </item>
    
    <item>
      <title>How to unit test Django&#39;s Function Based Views</title>
      <link>https://kowalcj0.github.io/2014/07/31/how-to-unit-test-djangos-function-based-views/</link>
      <pubDate>Thu, 31 Jul 2014 13:27:58 +0000</pubDate>
      
      <guid>https://kowalcj0.github.io/2014/07/31/how-to-unit-test-djangos-function-based-views/</guid>
      <description>Let&amp;rsquo;s assume than the URL pattern to your Function Based View is defined like that:
_urls.py_
urlpatterns = patterns( ..., url(r&amp;#39;^$&amp;#39;, views.index, name=&amp;#39;index&amp;#39;), ... ) and your function based view looks like this: _views.py_
@api_view([&amp;#39;GET&amp;#39;]) @permission_classes((AllowAny,)) def index(request): data = { &amp;#39;field&amp;#39;: &amp;#39;value&amp;#39; } return Response(data) Then you can unit test such view by creating a minimal instance of the HttpRequest and pass it to that view. I tried to mock to test such view with the Mock library, by with no luck!</description>
    </item>
    
  </channel>
</rss>